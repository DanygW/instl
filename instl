#!/usr/local/bin/python

from __future__ import print_function

import sys
import os
import argparse
import yaml
import re

current_os = platform.system()
if current_os == 'Darwin':
    current_os = 'mac';
elif current_os == 'Windows':
    current_os = 'win';

from aYaml import augmentedYaml
from pyinstl import installItem
from pyinstl import configVarList

class cmd_line_options(object):
    def __init__(self):
        self.input_files = None
        self.out_file_option = None
        self.main_targets = None
        self.state_file_option = None
        self.run = False
    def __str__(self):
        retVal = ("input_files: {self.input_files}\nout_file_option: {self.out_file_option}\n"+
                "main_targets: {self.main_targets}\nstate_file_option: {self.state_file_option}\n"+
                "run: {self.run}\n").format(**vars())
        return retVal
                
class instl_state(object):
    def __init__(self):
        self.out_file_realpath = None
        self.install_items_map = {}
        self.cvl = configVarList.ConfigVarList()
        self.install_instaruction_lines = []
        
    def init_from_cmd_line_options(self, cmd_line_options_obj):
        if cmd_line_options_obj.input_files:
            self.cvl.add_const_config_variable("__INSTL_MAIN_INPUT_FILES__", "from commnad line options", *cmd_line_options_obj.input_files)
        if cmd_line_options_obj.out_file_option:
            self.cvl.add_const_config_variable("__INSTL_MAIN_OUT_FILE__", "from commnad line options", cmd_line_options_obj.out_file_option[0])
        if cmd_line_options_obj.main_targets:
            self.cvl.add_const_config_variable("__INSTL_MAIN_INSTALL_TARGETS__", "from commnad line options", *cmd_line_options_obj.main_targets)
        if cmd_line_options_obj.state_file_option:
            self.cvl.add_const_config_variable("__INSTL_MAIN_STATE_FILE__", "from commnad line options", cmd_line_options_obj.state_file_option)
        if cmd_line_options_obj.run:
            self.cvl.add_const_config_variable("__INSTL_MAIN_RUN_INSTALLATION__", "from commnad line options", "yes")
        
    def repr_for_yaml(self):
        retVal = list()
        retVal.append(augmentedYaml.YamlDumpDocWrap(self.cvl, '!define', "Definitions", explicit_start=True))
        retVal.append(augmentedYaml.YamlDumpDocWrap(self.install_items_map, '!install_map', "Installation map", explicit_start=True))
        return retVal       
        
def prepare_args_parser():
    def decent_convert_arg_line_to_args(self, arg_line):
        """ parse a file with options so that we do not have to write one sub-option
            per line.  Remove empty lines and comment lines and end of line comments.
            ToDo: handle quotes
        """
        line_no_whitespce = arg_line.strip()
        if line_no_whitespce and line_no_whitespce[0] != '#':
            for arg in line_no_whitespce.split():
                if not arg:
                    continue
                elif  arg[0] == '#':
                    break
                yield arg

    parser = argparse.ArgumentParser(description='instl: cross platform svn based installer',
                    prefix_chars='-+',
                    fromfile_prefix_chars='@',
                    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    argparse.ArgumentParser.convert_arg_line_to_args = decent_convert_arg_line_to_args
    standard_options = parser.add_argument_group(description='standard arguments:')
    standard_options.add_argument('input_files',
                                nargs='*',
                                metavar='file(s)-to-process',
                                help="One or more files containing dependencies and defintions")
    standard_options.add_argument('--out','-o',
                                required=False,
                                nargs=1,
                                default="stdout",
                                metavar='path-to-output-file',
                                dest='out_file_option',
                                help="a file to write installtion instructions")
    standard_options.add_argument('--target','-t',
                                required=False,
                                nargs='+',
                                default=["MAIN_INSTALL"],
                                metavar='which-target-to-install',
                                dest='main_targets',
                                help="Target to create install instructions for")
    standard_options.add_argument('--run','-r',
                                required=False,
                                default=False,
                                action='store_true',
                                dest='run',
                                help="run the installtion instructions script, requires --out")
    standard_options.add_argument('--state','-s',
                                required=False,
                                nargs='?',
                                const="stdout",
                                metavar='path-to-state-file',
                                dest='state_file_option',
                                help="a file to write program state - good for debugging")
    return parser;

def read_command_line_options(prog_state, arglist=None):
    try:
        parser = prepare_args_parser()
        if not arglist:
            arglist=sys.argv[1:]
        name_space_obj = cmd_line_options()
        args = parser.parse_args(arglist, namespace=name_space_obj)
        prog_state.init_from_cmd_line_options(name_space_obj)
    except Exception as ex:
        print(ex)
        raise
    return args

def read_input_files(prog_state):
    input_files = prog_state.cvl.get("__INSTL_MAIN_INPUT_FILES__", ())
    if input_files:
        file_actually_opened = list()
        for file_path in input_files:
            with open(file_path, "r") as file_fd:
                file_actually_opened.append(os.path.abspath(file_fd.name))
                for a_node in yaml.compose_all(file_fd):
                    if a_node.tag == u'!define':
                        read_defines(prog_state, a_node)
                    elif a_node.tag == u'!install_map':
                        read_install_items_map(prog_state, a_node)
                    else:
                        print("Unknown document tag", a_node.tag)
        prog_state.cvl.add_const_config_variable("__INSTL_MAIN_INPUT_FILES_ACTUALLY_OPENED__", "opened by read_input_files", *file_actually_opened)
        
internal_identifier_re = re.compile("""
                                    __                  # dunder here
                                    (?P<internal_identifier>\w*)
                                    __                  # dunder there
                                    """, re.VERBOSE)
def read_defines(prog_state, a_node):
    # if document is empty we get a scalar node
    if a_node.isMapping():
        for identifier, value in a_node:
            if not internal_identifier_re.match(identifier): # do not read internal state indentifiers
                cv = prog_state.cvl.get_configVar_obj(identifier)
                cv.extend([item.value for item in a_node[identifier]])
                cv.set_description(str(a_node[identifier].start_mark))
    
def read_install_items_map(prog_state, a_node):
    prog_state.install_items_map.update(installItem.read_yaml_items_map(a_node))
                
def create_intall_instructions_prefix(prog_state):
    prog_state.install_instaruction_lines.append("#!/bin/sh\n")
    for value in prog_state.cvl:
        if not internal_identifier_re.match(value): # do not read internal state indentifiers
            prog_state.install_instaruction_lines.append(value+"='"+" ".join(prog_state.cvl[value])+"'")
    prog_state.install_instaruction_lines.append("\nSAVE_DIR=`pwd`\n")

    
def create_intall_instructions_postfix(prog_state):
    prog_state.install_instaruction_lines.append("\ncd '${SAVE_DIR}'")
    prog_state.install_instaruction_lines.append("exit 0\n")

def create_install_by_folder(prog_state):
    install_by_folder = dict()
    for GUID in prog_state.install_items_map:
        for target in prog_state.install_items_map[GUID].target_list():
            if not target in install_by_folder:
                install_by_folder[target] = [GUID]
            else:
                if GUID not in install_by_folder:
                    install_by_folder[target].append(GUID)
    return install_by_folder
    
def create_intall_instructions(prog_state):
    install_targets = prog_state.cvl.get("__INSTL_MAIN_INSTALL_TARGETS__")
    if install_targets:
        create_intall_instructions_prefix(prog_state)
        install_by_folder = create_install_by_folder(prog_state)
        for folder in install_by_folder:
            prog_state.install_instaruction_lines.append(" ".join(("mkdir", "-p", "'"+folder+"'")))
            prog_state.install_instaruction_lines.append(" ".join(("cd", "'"+folder+"'")))
            for GUID in install_by_folder[folder]:
                installi = prog_state.install_items_map[GUID]
                for source in installi.source_list():
                    prog_state.install_instaruction_lines.append(" ".join(("svn", "checkout", "--revision", "HEAD", "'"+"$(BASE_URL)"+source+"'")))
            prog_state.install_instaruction_lines.append(os.linesep)
        create_intall_instructions_postfix(prog_state)
     
def open_output_file(prog_state):
    retVal = None
    out_file = prog_state.cvl.get("__INSTL_MAIN_OUT_FILE__", ("stdout",))
    if out_file:
        retVal = sys.stdout
        if out_file[0] != "stdout":
            retVal = open(out_file[0], "w")
            prog_state.out_file_realpath = os.path.realpath(out_file[0])
            os.chmod(prog_state.out_file_realpath, 0744)
    return retVal

def close_output_file(prog_state, fd):
    if fd and fd is not sys.stdout:
        fd.close()


def write_program_state(prog_state):
    state_file = prog_state.cvl.get("__INSTL_MAIN_STATE_FILE__", ("stdout",))
    if state_file:
        fd = sys.stdout
        if state_file[0] != "stdout":
            fd = open(state_file[0], "w")
        augmentedYaml.writeAsYaml(prog_state, fd)
        if fd is not sys.stdout:
            fd.close()
    
def write_instl_instructions(prog_state, fd):
    fd.write(os.linesep.join(prog_state.install_instaruction_lines))

def run_instl_instructions(prog_state):
    if "__INSTL_MAIN_RUN_INSTALLATION__" in prog_state.cvl:
        from subprocess import Popen
        install_process = Popen(prog_state.out_file_realpath)
        stdout, stderr = install_process.communicate()
    
if __name__ == "__main__":
    prog_state = instl_state()
    args = read_command_line_options(prog_state)
    prog_state.cvl.resolve()
    read_input_files(prog_state)
    prog_state.cvl.resolve()
    create_intall_instructions(prog_state)
    out_fd = open_output_file(prog_state)
    write_instl_instructions(prog_state, out_fd)
    close_output_file(prog_state, out_fd)
    write_program_state(prog_state)
    run_instl_instructions(prog_state)
